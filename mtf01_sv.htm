<html><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><head><meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"><title>MIDI TEXT FORMAT specifikation 0.1</title></head><body><h2>MIDI TEXT FORMAT, nivå 1 (level 1)</h2><p>MIDI TEXT FORMAT (.mtf) är ett textbaserat filformat för att skapa MIDI-filer. Det är på en låg nivå, för att det ska vara så flexibelt som möjligt, och precis som MIDI påminner om maskinspråk, så påminner .mtf om Assembler. Det påminner också om filformat som RTF och Postscript. Jag rekommenderar ingen att skriva koden för hand, utan den bör genereras av ett datorprogram.</p><p>Koden består av ord, och ord avskiljs med ett eller flera mellanslag och / eller radbrytningar.</p><p>Här kommer ett första exempel:</p><pre>mtf01 960 0 ( 90 3c 64 ) 479 ( 80 3c 00 ) 1 ( ff 2f 00 )  </pre><p>Orden i koden ovan har följande betydelse:</p><table><tr><td>mtf01</td><td>Filhuvud för filformatet .mtf</td><td>version 0.1</td></tr><tr><td>960</td><td>Upplösning i miditicks</td></tr><tr><td>0</td><td>Antalet absoluta miditicks ökas med 0</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>90</td><td>Not på</td><td>på kanal 1</td></tr><tr><td>3c</td><td>Tonhöjd</td><td>hexadecimalt 3c = 60 = C3</td></tr><tr><td>64</td><td>Anslagskänslighet</td><td>hexadecimalt 64 = 100</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr><tr><td>479</td><td>Antalet absoluta miditicks ökas med 479</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>80</td><td>Not av</td><td>på kanal 1</td></tr><tr><td>3c</td><td>Tonhöjd</td><td>hexadecimalt 3c = 60 = C3</td></tr><tr><td>00</td><td>Anslagskänslighet</td><td>hexadecimalt 00 - inget ljud</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr><tr><td>1</td><td>Antalet absoluta miditicks ökas med 1</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>ff</td><td>Metahändelse</td><td>slut på spår</td></tr><tr><td>2f</td><td>Metahändelse</td><td>slut på spår - fortsättning</td></tr><tr><td>00</td><td>Metahändelse</td><td>slut på spår - fortsättning</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr></table><p>Absoluta miditicks skrivs med siffror <strong>0-9</strong>, och ökas hela tiden (adderas), när nya ord läggs till. Midimeddelanden skrivs med två hexadecimala siffror <strong>0-9</strong>, <strong>a-f</strong>. Startparentes <strong>(</strong> startar ett midimeddelande och slutparentes <strong>)</strong> avslutar ett midimeddelande.</p><p>Följande kod ger samma resultat:</p><pre>mtf01 960 0 ( 90 3c 64 ) 240 239 ( 80 3c 00 ) 1 ( ff 2f 00 )  </pre><p>Orden i koden har följande betydelse:</p><table><tr><td>mtf01</td><td>Filhuvud för filformatet .mtf</td><td>version 0.1</td></tr><tr><td>960</td><td>Upplösning i miditicks</td></tr><tr><td>0</td><td>Antalet absoluta miditicks ökas med 0</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>90</td><td>Not på</td><td>på kanal 1</td></tr><tr><td>3c</td><td>Tonhöjd</td><td>hexadecimalt 3c = 60 = C3</td></tr><tr><td>64</td><td>Anslagskänslighet</td><td>hexadecimalt 64 = 100</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr><tr><td>240</td><td>Antalet absoluta miditicks ökas med 240</td></tr><tr><td>239</td><td>Antalet absoluta miditicks ökas med 239</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>80</td><td>Not av</td><td>på kanal 1</td></tr><tr><td>3c</td><td>Tonhöjd</td><td>hexadecimalt 3c = 60 = C3</td></tr><tr><td>00</td><td>Anslagskänslighet</td><td>hexadecimalt 00 - inget ljud</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr><tr><td>1</td><td>Antalet absoluta miditicks ökas med 1</td></tr><tr><td>(</td><td>Börjar ett midimeddelande</td></tr><tr><td>ff</td><td>Metahändelse</td><td>slut på spår</td></tr><tr><td>2f</td><td>Metahändelse</td><td>slut på spår - fortsättning</td></tr><tr><td>00</td><td>Metahändelse</td><td>slut på spår - fortsättning</td></tr><tr><td>)</td><td>Avslutar ett midimeddelande</td></tr></table><h2>MIDI TEXT FORMAT, nivå 2 (level 2)</h2><p>Med hjälp av hakparenteser, kan man gå till nästa midispår <strong>[</strong>, eller tillbaka till föregående midispår <strong>]</strong>. När man byter midispår, hamnar man på den position (miditicks), där man senast lämnade det. Ett program, som läser filen ska först gå igenom den en gång, för att kolla hur många spår det är. Om filen saknar hakparenteser ska en midifil typ 0 skapas. I annat fall ska en midifil, typ 1 skapas. Efter det går programmet igenom filen lika många gånger, som det finns midispår, och behandlar den kod, som hör till varje spår - ett spår i taget.</p><p>Här kommer ett exempel. Den här koden skapar tre midispår, där det första är till för tempo, taktart och annan information. De andra två spåren är till för not på och av meddelanden, och de innehåller två noter vardera:</p><pre>mtf01 960 0 ( ff 2f 00 )
[ 0 ( 90 3c 64 ) 479 ( 80 3c 00 ) 1 0 ( 90 3e 64 ) 479 ( 80 3e 00 ) 1 0 ( ff 2f 00 )
[ 0 ( 90 3c 64 ) 479 ( 80 3c 00 ) 1 0 ( 90 3e 64 ) 479 ( 80 3e 00 ) 1 0 ( ff 2f 00 )
] ]</pre><p>Följande kod ger samma resultat:</p><pre>mtf01 960 0 ( ff 2f 00 )
[ 0 ( 90 3c 64 ) 479 ( 80 3c 00 ) 1 [ 0 ( 90 3c 64 ) 479 ( 80 3c 00 ) 1
] 0 ( 90 3e 64 ) 479 ( 80 3e 00 ) 1 [ 0 ( 90 3e 64 ) 479 ( 80 3e 00 ) 1
] 0 ( ff 2f 00 ) [ 0 ( ff 2f 00 ) ] ]</pre><h2>MIDI TEXT FORMAT, nivå 3 (level 3)</h2><p>På den här nivån finns 128 minnesplatser, märkta hexadecimalt <strong>00 - 7f</strong>, som var och en kan lagra ett positivt 7-bitars värde - också de hexadecimalt märkta <strong>00 - 7f</strong>. Minnesplatserna går att referera till, genom att sätta en stjärna <strong>*</strong> alldeles före det hexadecimala värdet, till exempel <strong>*00</strong> eller <strong>*3c</strong>. Till minnesplatserna finns också en stack för räkneoperationer, som också hanterar positiva 7-bitars värden.</p><p>Inför varje genomkörning av kodfilen - en för varje midispår, nollställs alla minnesplatser, så de värden som definieras här gäller enbart för det midispår man för tillfället befinner sig i.</p><p>Värden till dessa minnesplatser definieras inom klammerparenteser, <strong>{</strong> och <strong>}</strong> och där används ord från programspråket FORTH - närmare bestämt dess kärnlager (nucleus layer), som här hanterar 7-bitars värden. Här skrivs orden med små bokstäver.</p><p>Av dessa ord används utropstecken <strong>!</strong>, till att flytta ett värde från stacken till en minnesplats och alfaslang <strong>@</strong> till att kopiera ett värde från en minnesplats till stacken. Resterande ord används för att flytta och manipulera 7-bitars värden på stacken.</p><p>Följande ord är tänkbara inom klammerparenteser:</p><table><tr><td>!</td><td>(n adr --&gt; )</td><td>Sparar n på adress adr</td></tr><tr><td>@</td><td>(adr --&gt; n)</td><td>Ersätter adress med dess innehåll</td></tr><tr><td>+</td><td>(n1 n2 --&gt; sum)</td><td>Addition</td></tr><tr><td>-</td><td>(n1 n2 --&gt; diff)</td><td>Subtraktion</td></tr><tr><td>*</td><td>(n1 n2 --&gt; prod)</td><td>Multiplikation</td></tr><tr><td>/</td><td>(n1 n2 --&gt; kvot)</td><td>Heltalsdivision</td></tr><tr><td>inc</td><td>(n --&gt; inc)</td><td>Increment</td><td>ökar med 1</td></tr><tr><td>dec</td><td>(n --&gt; dec)</td><td>Decrement</td><td>minskar med 1</td></tr><tr><td>mod</td><td>(n1 n2 --&gt; rest)</td><td>Ger rest från division</td></tr><tr><td>/mod</td><td>(n1 n2 --&gt; rest kvot)</td><td>Ger kvot och rest från division</td></tr><tr><td>max</td><td>(n1 n2 --&gt; max)</td><td>Ger maxvärde</td></tr><tr><td>min</td><td>(n1 n2 --&gt; min)</td><td>Ger minvärde</td></tr><tr><td>&lt;</td><td>(n1 n2 --&gt; b)</td><td>Mindre än (ger 00 eller 7f)</td></tr><tr><td>&gt;</td><td>(n1 n2 --&gt; b)</td><td>Större än (ger 00 eller 7f)</td></tr><tr><td>=</td><td>(n1 n2 --&gt; b)</td><td>Lika med (ger 00 eller 7f)</td></tr><tr><td>&lt;&gt;</td><td>(n1 n2 --&gt; b)</td><td>Inte lika med (ger 00 eller 7f)</td></tr><tr><td>not</td><td>(n1 --&gt; b)</td><td>Logiskt not (Ändrar 00 till 7f och allt annat till 00)</td></tr><tr><td>and</td><td>(n1 n2 --&gt; and)</td><td>Logiskt och (ger 00 eller 7f)</td></tr><tr><td>or</td><td>(n1 n2 --&gt; or)</td><td>Logiskt eller (ger 00 eller 7f)</td></tr><tr><td>xor</td><td>(n1 n2 --&gt; xor)</td><td>Logiskt xor (ger 00 eller 7f)</td></tr><tr><td>drop</td><td>(n --&gt; )</td><td>Tar bort toppen på stacken</td></tr><tr><td>nip</td><td>(n1 n2 --&gt; n2)</td><td>Tar bort det andra värdet</td></tr><tr><td>dup</td><td>(n --&gt; n n)</td><td>Duplicerar toppen på stacken</td></tr><tr><td>swap</td><td>(n1 n2 --&gt; n2 n1)</td><td>Byter plats på de två översta väderna</td></tr><tr><td>over</td><td>(n1 n2 --&gt; n1 n2 n1)</td><td>Kopierar stackens andra värde och placerar det överst</td></tr><tr><td>rot</td><td>(n1 n2 n3 --&gt; n2 n3 n1)</td><td>Flyttar det tredje värdet till toppen (rotation)</td></tr><tr><td>pick</td><td>(n1 --&gt; n2)</td><td>Kopierar värde nummer n1 och lägger det överst på stacken</td></tr><tr><td>2!</td><td>(n1 n2 adr --&gt; )</td><td>Sparar n1 n2 på adress adr (14-bitars heltal)</td></tr><tr><td>2@</td><td>(adr --&gt; n1 n2)</td><td>Ersätter adress med dess innehåll (14-bitars heltal)</td></tr><tr><td>2drop</td><td>(n1 n2 --&gt; )</td><td>Tar bort toppen på stacken (14-bitars heltal)</td></tr><tr><td>2dup</td><td>(n1 n2 --&gt; n1 n2 n1 n2)</td><td>Duplicerar toppen på stacken (14-bitars heltal)</td></tr><tr><td>2swap</td><td>(n1 n2 n3 n4 --&gt; n3 n4 n1 n2)</td><td>Byter plats på de två översta väderna (14-bitars heltal)</td></tr><tr><td>2over</td><td>(n1 n2 n3 n4 --&gt; n1 n2 n3 n4 n1 n2)</td><td>Kopierar stackens andra värde och placerar det överst (14-bitars heltal)</td></tr></table><p>Här kommer några exempel. Först läggs hexadecimala värdet <strong>3c</strong> = 60 = tonhöjden C3 i minnesplats <strong>00</strong>, som det sedan refereras till i midimeddelandet.</p><pre>mtf01 960 { 3c 00 ! }
0 ( 90 *00 64 ) 479 ( 80 *00 00 ) 1
0 ( 90 *00 64 ) 479 ( 80 *00 00 ) 1
0 ( ff 2f 00 )  </pre><p>I nästa exempel läggs även värdet för anslagskänslighet i minnesplats <strong>40</strong>, som det sedan refereras till:</p><pre>mtf01 960 { 3c 00 ! } { 64 40 ! }
0 ( 90 *00 *40 ) 479 ( 80 *00 00 ) 1
0 ( 90 *00 *40 ) 479 ( 80 *00 00 ) 1
0 ( ff 2f 00 )  </pre><p>Ett sätt att fördela minnesplatserna, är att använda första hälften <strong>00 - 3f</strong> till tonhöjder, och andra hälften <strong>40 - 7f</strong>, till anslagskänsligheter.</p><p>I nästa fall läggs först tonhöjden i minnesplats <strong>00</strong>, för att sedan åter läggas på stacken, och därefter adderas med två, för att sedan läggas i minnesplats <strong>01</strong>.</p><pre>mtf01 960 { 3c 00 ! } { 00 @ 02 + 01 ! } { 64 40 ! }
0 ( 90 *00 *40 ) 479 ( 80 *00 00 ) 1
0 ( 90 *01 *40 ) 479 ( 80 *01 00 ) 1
0 ( ff 2f 00 )  </pre><h2>MIDI TEXT FORMAT, nivå 4 (level 4)</h2><p>På fjärde nivån tillkommer ord från FORTHs kompileringslager (compiler layer). Detta främst för att kunna definiera egna ord, men också för att det ska gå att använda loopar och villkorssatser.</p><p>Här kommer ett exempel på ord definierade för att byta omläggning på trestämmiga ackord. Ackordtonerna finns i minnesplatserna <strong>00</strong>, <strong>01</strong> och <strong>02</strong>, med den lägsta tonen i <strong>00</strong>, och den högsta i <strong>02</strong>. Minnesplats <strong>03</strong> används för mellanlagring.</p><pre>mtf01 960 { : &gt; 00 @ 12 + 03 ! 01 @ 00 ! 02 @ 01 ! 03 @ 02 ! ; 
: &lt; 02 @ 12 - 03 ! 01 @ 02 ! 00 @ 01 ! 03 @ 00 ! ; }</pre><p>Precis som när det gäller minnesplatserna, så hör varje definierat ord till ett bestämt midispår, och för varje nytt spår så töms ordlistan. Det går därför att ha olika uppsättningar av definierade ord för olika typer av midispår.</p><p>Alla ord som innehåller <strong>(</strong>, <strong>)</strong>, <strong>[</strong>, <strong>]</strong>, <strong>{</strong>, <strong></strong>, <strong>&lt;</strong> och <strong>&gt;</strong>, och som inte finns i FORTH, är tills vidare reserverade. </p></body></html>